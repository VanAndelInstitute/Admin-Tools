#!/bin/bash

##############################################################
#  
#  Author     : Matthew Hoffman
#  Company    : Van Andel Institute
#  Description: 
#  Utility that allows queue owners to modify their owned
#  queue by adding or removing users. 
#
##############################################################

add_to_queue(){
  echo Adding $user to the $queue queue
  `/cm/shared/apps/torque/6.0.2/bin/qmgr -c "set queue $queue acl_users+=$user"`
}

check_group(){

  OK=1
  if id -nG "$SUDO_USER" | grep -qw "hpcadmins"; then OK=0;
  
  elif [[ "$queue" == "triche" ]]; then
    
    if [[ "$user" == "tim.triche" ]]; then
      echo "The owner of a queue cannot be removed from their owned queue."
      exit 0
    fi
    
    if [[ "$SUDO_USER" == "tim.triche" ]]; then OK=0;
    else echo $SUDO_USER cannot modify the $queue queue... Exiting; fi
  
  else
    echo $SUDO_USER cannot modify the $queue queue... Exiting;
  fi
}

list_users_in_queue(){
  if [[ "$queue" == "" ]]; then
    echo "Please provide a queue."
    exit 0
  fi
  
  users=$(/cm/shared/apps/torque/6.0.2/bin/qstat -Qf | grep $queue | grep acl_users | sed 's/.*=//')
  
  if [[ "$users" == "" ]]; then
    echo "No users are defined. This queue is available to all HPC users."
    echo "If you are the owner of this queue and would like to limit the users who can submit jobs please contact the HPC admins."
  else
    printf "The following users can submit jobs to the $queue queue:$users\n"
  fi

}

remove_from_queue(){
  echo Removing $user from the $queue queue
  `/cm/shared/apps/torque/6.0.2/bin/qmgr -c "set queue $queue acl_users-=$user"`
}

run(){
  validate
  check_group
  if [ "$OK" -eq 0 ]; then
    if [ "$force" -eq 0 ]; then
      verify_input
    fi
    
    if [[ "$option" == "remove" ]]; then
      remove_from_queue
    else
      add_to_queue
    fi
  fi
}

show_help(){
  printf "\nUsage: sudo modify_queue -u USER -q QUEUE [OPTION]...\n"
  printf "Add or remove users from a queue on the Van Andel Institute HPC cluster.\n"
  printf "Requires ownership of queue and sudo access. Contact the HPC Admin for access\n\n"
  printf "  -f\t\tignore all prompts and force the change to the queue\n"
  printf "  -h\t\tshow this help message\n"
  printf "  -l\t\tlist the users allowed to submit jobs to the queue supplied. Does not require a user to be supplied.\n"
  printf "  -o\t\tthe action to be taken: add, remove\n\t\t  defaults to add when not specified\n"
  printf "  -q\t\tthe queue to be modified. mandatory parameter\n"
  printf "  -u\t\tthe user to be modified. mandatory parameter\n"
}

validate(){

  if [[ "$SUDO_USER" == "" ]]; then
    echo "modify_queue requires sudo access... Exiting"
    exit 0
  fi

  if [[ "$user" == "" ]]; then
    echo Please specify a user... Exiting
    exit 0
  fi
  
  if [[ "$queue" == "" ]]; then
    echo Please specify a queue... Exiting
    exit 0
  fi

  user_does_not_exist=$(id -u $user > /dev/null 2>&1; echo $?)
  
  if [[ $user_does_not_exist == 1 ]]; then
    echo No user $user found. Please use the form user.name
    exit 0
  fi
}

verify_input(){
  if [[ "$option" == "add" ]]; then
    printf "$option $user to the $queue queue? (y|n) :"
  else
    printf "$option $user from the $queue queue? (y|n) :"
  fi
  read input
  if [[ "$input" != "y" ]]; then
    exit 0
  fi
}

###############################################################################

# Create Variables

OPTIND=1        	# POSIX VARIBLE for getopts

force=0			# Ignore prompts when 1
option="add"		# Add or Remove the user
user=""			# The user to be modified
queue=""		# The queue to be modified

# Process input
while getopts "hfl?o:u:q:" opt; do
  case "$opt" in
    h|\?)
      show_help
      exit 0
      ;;
    u)
      user=$(echo $OPTARG | tr '[A-Z]' '[a-z]')
      ;;
    q)
      queue=$(echo $OPTARG | tr '[A-Z]' '[a-z]')
      ;;
    l)
     list_users_in_queue
     exit 0
     ;;
    f)
      force=1
      ;;
    o) option=$(echo $OPTARG | tr '[A-Z]' '[a-z]')
      ;;
    *)
      echo >&2 "Invalid argument(s): $1"
      echo See modify_queue -h for usage
      exit 0
      ;;
  esac
done

shift $((OPTIND-1))
[ "$1" = "--" ] && shift
 
# Run the program
run
exit 0
