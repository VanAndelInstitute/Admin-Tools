#/bin/bash

##############################################################################
#  
#  Author     : Matthew Hoffman
#  Company    : Van Andel Institute
#  Description: 
#  Automatically detect, log and end high memory proccesses on the head node
#
##############################################################################

# POSIX Variable require for getopts
OPTIND=1                                                                        

# allow the percentage and time allowed to be set via the command line
# ex: ./detect_high_mem_processes -p 6, sets the percentage to 1/6 total mem
# ex: ./detect_high_mem_processes -t 10, sets the time allowed to 10 minutes
# these can be set in any order
# the -e option is required to automatically end processes                                                                               
while getopts "e?p:t:" opt; do                                                
  case "$opt" in                                                                
    e)
      END=1    
      ;;
    p)                                                                          
      PERCENTAGE_ALLOWED=$OPTARG                                                        
      ;;                                                                        
    t)                                                                          
      ALLOWED_TIME=$OPTARG                                                        
      ;;                                                                        
    *)                                                                          
      echo >&2 "Invalid argument(s): $1"                                        
      exit 0                                                                    
      ;;                                                                        
  esac                                                                          
done                                                                            
                                                                                
shift $((OPTIND-1))                                                             
[ "$1" = "--" ] && shift  

file="ps.txt"

# pull the total amount of system memory from meminfo
TOTAL_MEM=`/usr/bin/awk '/MemTotal/ {a=$2} END{printf("%d", a)}' /proc/meminfo`

# default to 25% of TOTAL_MEM, if not set on the command line
[ -z "$PERCENTAGE_ALLOWED" ] && PERCENTAGE_ALLOWED=4

# default to 5 minutes if not set on the command line
[ -z "$ALLOWED_TIME" ] && ALLOWED_TIME=5

[ -z "$END" ] && END=0

# set the maximum allowed memory for a user process
MAX_ALLOWED_MEM=$((TOTAL_MEM / PERCENTAGE_ALLOWED))

function process_ps(){
  while read -r line; do

    # separate each line by whitespace and assign variables
    arr=($line)
    user=${arr[0]}
    uid=${arr[1]}
    pid=${arr[2]}
    fname=${arr[3]}
    size=${arr[4]}

    host=`hostname`

    # if the the process is using more memory than allowed and user is not a
    # system user, alert the user and send to system log 
    if [[ "$size" -ge "$MAX_ALLOWED_MEM" ]] && [[ "$uid" -gt 500 ]]; then

      if [[ "$END" -eq 1 ]]; then
        #`printf "Your process, $fname ($pid), is using more than the maximum memory allowed for a user process on $host.\nThis process will automatically be terminated within the next $ALLOWED_TIME minutes.\n\n" | /usr/bin/write $user`
        d=`date +%H%M`
        line="$user $fname $pid"
        grep -qF -- "$line" "$file" || echo "$line $d" >> "$file"
      else
        #`printf "Your process, $fname ($pid), is using more than the maximum memory allowed for a user process on $host.\nThe hpcadmins have been notified.\n\n" | /usr/bin/write $user`
      fi

      /usr/bin/logger "Process $fname ($pid) owned by $user is using more than the maximum memory allowed on $host."
    fi
  done <<< "$(/usr/bin/ps -eo user:35,uid,pid,fname,size --sort size | /usr/bin/tail)"
}

function end(){
  while read name
  do
    arr=($name)
    user=${arr[0]}
    fname=${arr[1]}
    pid=${arr[2]}
    t=${arr[3]}

    date=`date +%H%M`
    dif=$(($date-$t))

    # If the process has been running for longer than the allowed time, 
    # end it and send the information to the system log.
    if [[ "$dif" -ge "$ALLOWED_TIME" ]]; then
      #`printf "Your process, $fname ($pid), has automatically been terminated.\n\n" | /usr/bin/write $user`
      /usr/bin/logger "Automatically ending high memory process: $fname ($pid) owned by $user"

      sed -i "/$pid/d" $file 
      `kill -9 $pid`
    fi
  done < $file
}

process_ps

if [[ "$END" -eq 1 ]]; then
  end
fi
